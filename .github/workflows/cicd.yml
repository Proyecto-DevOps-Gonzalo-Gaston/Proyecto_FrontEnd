name: CI/CD Pipeline

on:
  push:
    branches:
      - Develop
  pull_request:
    branches:
      - Develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Run build
      run: nx build

    - name: Verify build directory
      run: |
        echo "Verifying build directory contents:"
        ls -la dist/apps/your-app-name

    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: dist/apps/your-app-name/

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: build
        path: dist/apps/your-app-name/

    - name: Verify downloaded build directory
      run: ls -la dist/apps/your-app-name

    - name: Run tests
      run: nx test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/Develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: build
        path: dist/apps/your-app-name/

    - name: Verify downloaded build directory
      run: ls -la dist/apps/your-app-name

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to S3
      run: |
        aws s3 sync dist/apps/your-app-name/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
